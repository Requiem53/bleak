section	.text
	global _start       ;must be declared for using gcc
_start:                     ;tell linker entry point
    call _writeMsg1
    call _readNum1

    mov ecx,[num1]
    mov eax, '1'
 
    l1:
    call choiceLong
    loop l1
 
    call exit
 
choiceLong:
    mov eax, 4
    mov ebx, 1
    push ecx
 
    mov ecx, choice
    mov edx, choiceLen
    int 80h
 
    pop ecx
 
    ret
 
spacer:
    mov eax, 4
    mov ebx, 1
    push ecx
    mov ecx, space
    mov edx, 1
    int 80h
    pop ecx
    ret
 
_writeMsg1:
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, len1
    int 80h
    ret
_readNum1:
    mov eax, 3
    mov ebx, 0
    lea ecx, [buffer1]
    mov edx, 16
    int 80h
    xor eax, eax
    lea esi, [buffer1]
    convert1:
        movzx edx, byte [esi]
        cmp dl, 10
        je done1
        sub edx, '0'
        imul eax, 10
        add eax, edx
        inc esi
        jmp convert1
    done1:
        mov edi, num1
        mov [edi], eax
    ret

 
exit:
    mov eax, 1
    mov ebx, 0
    int 80h
    ret

              ;call kernel
 
 
section	.data
 
 
msg1: db "Enter a number: "
len1: equ $-msg1
choice db "#"
choiceLen equ $-choice
 
 
space db 0xa
blank db ' '
 
 
   
section	.bss
num resb 1
num1 resb 4
buffer1 resb 16