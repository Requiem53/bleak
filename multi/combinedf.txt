;num1
section .text

global _start         ;must be declared for using gcc

_start:       ;tell linker entry point

mov   ecx, [num1]
cmp   ecx, [num2]
jg    _exit

xor ecx, ecx
mov ecx, [num2]
mov   [largest], ecx
mov   ecx,msg

mov   edx, len
mov   ebx,1 ;file descriptor (stdout)
mov   eax,4;systemcall number (sys_write)
int   0x80;call kernel

mov   ecx,largest
mov   edx, 2
mov   ebx,1;file descriptor (stdout)
mov   eax,4;system call number (sys_write)
int   0x80;call kernel

;smallest
mov ecx, [num1]
mov [smallest], ecx

mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h

mov ecx, smallest
mov edx, 2
mov ebx, 1
mov eax, 4
int 80h

mov   eax, 1
int   80h

_exit:
mov   [largest], ecx
mov   ecx,msg
mov   edx, len
mov   ebx,1 ;file descriptor (stdout)
mov   eax,4;systemcall number (sys_write)
int   0x80;call kernel

mov   ecx,largest
mov   edx, 2
mov   ebx,1;file descriptor (stdout)
mov   eax,4;system call number (sys_write)
int   0x80;call kernel

;smallest

mov ecx, [num2]
mov [smallest], ecx

mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h

mov ecx, smallest
mov edx, 2
mov ebx, 1
mov eax, 4
int 80h

mov   eax, 1
int   80h

ret

section .data
msg db "The largest digit is: "
len equ $-msg 
msg1 db 10,"The smallest digit is: "
len1 equ $-msg1 
num1 dd '53'
num2 dd '42'

segment .bss
largest resb 2
smallest resb 2

;num2
section .data
msg db "Largest: "
len equ $-msg 
msg1 db 10,"Smallest: "
len1 equ $-msg1 

num1 dd '22'
num2 dd '21'
num3 dd '55'

segment .bss
largest resb 2
smallest resb 2  

section .text
global _start

_start:
  mov ecx,[num1]
  cmp ecx,[num2]
  jge _checker
  mov ecx,[num2]
  
_checker:
  cmp ecx,[num3]
  jge _print1
  mov ecx,[num3]
  
_print1:
  mov [largest],ecx
  
  mov eax,4
  mov ebx,1
  mov ecx,msg
  mov edx,len 
  int 0x80
  
  mov eax,4
  mov ebx,1 
  mov ecx, largest 
  mov edx, 2 
  int 0x80
  
;smallest
  mov ecx,[num1]
  cmp ecx,[num2]
  jle _checker1
  mov ecx,[num2]
  
_checker1:
  cmp ecx,[num3]
  jle _print2
  mov ecx,[num3]
  
_print2:
  mov [smallest],ecx
  
  mov eax, 4
  mov ebx, 1
  mov ecx, msg1
  mov edx, len1 
  int 0x80
  
  mov eax,4
  mov ebx,1 
  mov ecx, smallest 
  mov edx, 2 
  int 0x80
  
  mov eax,1
  int 0x80
  
;num3
section .text

global _start         ;must be declared for using gcc

_start:       ;tell linker entry point

mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, len2
int 80h

;1st num
mov eax, 4
mov ebx, 1
mov ecx, msg3
mov edx, len3
int 80h

mov eax, 3
mov ebx, 2
mov ecx, num1
mov edx, 2
int 80h

;2nd num
mov eax, 4
mov ebx, 1
mov ecx, msg4
mov edx, len4
int 80h

mov eax, 3
mov ebx, 2
mov ecx, num2
mov edx, 2
int 80h

;checker
mov   ecx, [num1]
cmp   ecx, [num2]
jg    _exit

xor ecx, ecx
mov ecx, [num2]
mov   [largest], ecx
mov   ecx,msg

mov   edx, len
mov   ebx,1 ;file descriptor (stdout)
mov   eax,4;systemcall number (sys_write)
int   0x80;call kernel

mov   ecx,largest
mov   edx, 2
mov   ebx,1;file descriptor (stdout)
mov   eax,4;system call number (sys_write)
int   0x80;call kernel

;smallest
mov ecx, [num1]
mov [smallest], ecx

mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h

mov ecx, smallest
mov edx, 2
mov ebx, 1
mov eax, 4
int 80h

mov   eax, 1
int   80h

_exit:
mov   [largest], ecx
mov   ecx,msg
mov   edx, len
mov   ebx,1 ;file descriptor (stdout)
mov   eax,4;systemcall number (sys_write)
int   0x80;call kernel

mov   ecx,largest
mov   edx, 2
mov   ebx,1;file descriptor (stdout)
mov   eax,4;system call number (sys_write)
int   0x80;call kernel

;smallest

mov ecx, [num2]
mov [smallest], ecx

mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h

mov ecx, smallest
mov edx, 2
mov ebx, 1
mov eax, 4
int 80h

mov   eax, 1
int   80h

ret

section .data
msg db "The largest digit is: "
len equ $-msg 
msg1 db 10,"The smallest digit is: "
len1 equ $-msg1

msg2 db "Input two numbers: ", 10
len2 equ $-msg2

msg3 db "1st number: "
len3 equ $-msg3

msg4 db "2nd number: "
len4 equ $-msg4

segment .bss
num1 resb 2
num2 resb 2
largest resb 2
smallest resb 2

;num4
section .text

global _start         ;must be declared for using gcc

_start:       ;tell linker entry point

mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, len2
int 80h

;1st num
mov eax, 4
mov ebx, 1
mov ecx, msg3
mov edx, len3
int 80h

mov eax, 3
mov ebx, 2
mov ecx, num1
mov edx, 2
int 80h

;2nd num
mov eax, 4
mov ebx, 1
mov ecx, msg4
mov edx, len4
int 80h

mov eax, 3
mov ebx, 2
mov ecx, num2
mov edx, 2
int 80h

;3rd num
mov eax, 4
mov ebx, 1
mov ecx, msg5
mov edx, len5
int 80h

mov eax, 3
mov ebx, 2
mov ecx, num3
mov edx, 2
int 80h

;checker
  mov ecx,[num1]
  cmp ecx,[num2]
  jge _checker
  mov ecx,[num2]
  
_checker:
  cmp ecx,[num3]
  jge _print1
  mov ecx,[num3]
  
_print1:
  mov [largest],ecx
  
  mov eax,4
  mov ebx,1
  mov ecx,msg
  mov edx,len 
  int 0x80
  
  mov eax,4
  mov ebx,1 
  mov ecx, largest 
  mov edx, 2 
  int 0x80
  
;smallest
  mov ecx,[num1]
  cmp ecx,[num2]
  jle _checker1
  mov ecx,[num2]
  
_checker1:
  cmp ecx,[num3]
  jle _print2
  mov ecx,[num3]
  
_print2:
  mov [smallest],ecx
  
  mov eax, 4
  mov ebx, 1
  mov ecx, msg1
  mov edx, len1 
  int 0x80
  
  mov eax,4
  mov ebx,1 
  mov ecx, smallest 
  mov edx, 2 
  int 0x80
  
  mov eax,1
  int 0x80

section .data
msg db "The largest digit is: "
len equ $-msg 
msg1 db 10,"The smallest digit is: "
len1 equ $-msg1

msg2 db "Input three numbers: ", 10
len2 equ $-msg2

msg3 db "1st number: "
len3 equ $-msg3

msg4 db "2nd number: "
len4 equ $-msg4

msg5 db "3rd number: "
len5 equ $-msg5

segment .bss
num1 resb 2
num2 resb 2
num3 resb 2
largest resb 2
smallest resb 2

;num5
section .text

global _start         ;must be declared for using gcc

_start:       ;tell linker entry point

mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, len2
int 80h

mov eax, 3
mov ebx, 2
mov ecx, num1
mov edx, 2
int 80h

mov ecx, [num1]
cmp ecx, [num]
jge _groe

mov eax, 4
mov ebx, 1
mov ecx, msg
mov edx, len
int 80h

mov eax, 1
mov ebx, 0
int 80h

_groe:
mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h

section .data
msg db "The number is less than 10"
len equ $-msg 
msg1 db 10,"The number is greater than or equal to 10"
len1 equ $-msg1

msg2 db "Input a number: "
len2 equ $-msg2

num dd '10'

segment .bss
num1 resb 2

;num6
section	.text
   global _start        ;must be declared for using gcc

section .data
    space db " "
    buffer1 dd 49
    buffer2 dd 48
	
_start:	                ;tell linker entry point
   mov ecx,9
   mov eax, '1'
	
l1:
   mov [num], eax
   mov eax, 4
   mov ebx, 1
   push ecx
	
   mov ecx, num        
   mov edx, 1        
   int 0x80
   
   mov eax, 4
   mov ebx, 1
   mov ecx, space
   mov edx, 1
   int 80h
	
   mov eax, [num]
   sub eax, '0'
   inc eax
   add eax, '0'
   pop ecx
   
   loop l1
	
	mov eax, 4
	mov ebx, 2
	mov ecx, buffer1
	mov edx, 1
	int 80h
	
	mov eax, 4
	mov ebx, 2
	mov ecx, buffer2
	mov edx, 1
	int 80h
	
	
   mov eax,1             ;system call number (sys_exit)
   int 0x80              ;call kernel
section	.bss
num resb 1

;num7
section	.text
   global _start        ;must be declared for using gcc

section .data
    newLine db 10
    buffer1 dd 49
    buffer2 dd 48
	
_start:	                ;tell linker entry point
   mov ecx,9
   mov eax, '1'
	
l1:
   mov [num], eax
   mov eax, 4
   mov ebx, 1
   push ecx
	
   mov ecx, num        
   mov edx, 1        
   int 0x80
   
   mov eax, 4
   mov ebx, 1
   mov ecx, newLine
   mov edx, 1
   int 80h
	
   mov eax, [num]
   sub eax, '0'
   inc eax
   add eax, '0'
   pop ecx
   
   loop l1
	
	mov eax, 4
	mov ebx, 2
	mov ecx, buffer1
	mov edx, 1
	int 80h
	
	mov eax, 4
	mov ebx, 2
	mov ecx, buffer2
	mov edx, 1
	int 80h
	
	
   mov eax,1             ;system call number (sys_exit)
   int 0x80              ;call kernel
section	.bss
num resb 1

;num8
section	.text
	global _start       ;must be declared for using gcc
_start:                     ;tell linker entry point
 
    
    mov ecx, 10  
    mov eax, '1' 
 
    l1:
    call hashtagPrint
    loop l1
 
    call exit
 
hashtagPrint:
    mov eax, 4
    mov ebx, 1
    push ecx
 
    mov ecx, hashtag
    mov edx, len1
    int 80h
 
    pop ecx
 
    ret
 
spacer:
    mov eax, 4
    mov ebx, 1
    push ecx
    mov ecx, space
    mov edx, 1
    int 80h
    pop ecx
    ret
 
 
exit:
    mov eax, 1
    mov ebx, 0
    int 80h
    ret
 
section	.data
 
hashtag db "###########",10
len1 equ $-hashtag
 
 
space db 10
blank db ' '

;num9
section	.text
   global _start        ;must be declared for using gcc

section .data
    space db " "
	
_start:	                ;tell linker entry point
   mov eax, 3
   mov ebx, 2
   mov ecx, num1
   mov edx, 1
   int 80h
   
   mov ecx, [num1]
   sub ecx, '0'
   mov eax, '1'
	
l1:
   mov [num], eax
   mov eax, 4
   mov ebx, 1
   push ecx
	
   mov ecx, num        
   mov edx, 1        
   int 0x80
   
   mov eax, 4
   mov ebx, 1
   mov ecx, space
   mov edx, 1
   int 80h
	
   mov eax, [num]
   sub eax, '0'
   inc eax
   add eax, '0'
   pop ecx
   
   loop l1
	
   mov eax,1             ;system call number (sys_exit)
   int 0x80              ;call kernel
   
section	.bss
num resb 1
num1 resb 1
real1 resb 1

;num10
section	.text
	global _start       ;must be declared for using gcc
_start:                     ;tell linker entry point
    call _writeMsg1
    call _readNum1

    mov ecx,[num1]
    mov eax, '1'
 
    l1:
    call choiceLong
    loop l1
 
    call exit
 
choiceLong:
    mov eax, 4
    mov ebx, 1
    push ecx
 
    mov ecx, choice
    mov edx, choiceLen
    int 80h
 
    pop ecx
 
    ret
 
spacer:
    mov eax, 4
    mov ebx, 1
    push ecx
    mov ecx, space
    mov edx, 1
    int 80h
    pop ecx
    ret
 
_writeMsg1:
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, len1
    int 80h
    ret
_readNum1:
    mov eax, 3
    mov ebx, 0
    lea ecx, [buffer1]
    mov edx, 16
    int 80h
    xor eax, eax
    lea esi, [buffer1]
    convert1:
        movzx edx, byte [esi]
        cmp dl, 10
        je done1
        sub edx, '0'
        imul eax, 10
        add eax, edx
        inc esi
        jmp convert1
    done1:
        mov edi, num1
        mov [edi], eax
    ret

 
exit:
    mov eax, 1
    mov ebx, 0
    int 80h
    ret

              ;call kernel
 
 
section	.data
 
 
msg1: db "Enter a number: "
len1: equ $-msg1
choice db "#"
choiceLen equ $-choice
 
 
space db 0xa
blank db ' '
 
 
   
section	.bss
num resb 1
num1 resb 4
buffer1 resb 16